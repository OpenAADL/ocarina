test_real_parse_env_01.aadl:10:03: Warning: source_language is not a list while the corresponding property name at programming_properties.aadl:61:02 is a list.
test_real_parse_env_01.aadl:10:03: Warning: The value of source_language has been converted into a list.
test_real_parse_env_01.aadl:16:03: Warning: source_language is not a list while the corresponding property name at programming_properties.aadl:61:02 is a list.
test_real_parse_env_01.aadl:16:03: Warning: The value of source_language has been converted into a list.








package Test_01
public
  subprogram Hello_Spg_1
  properties
    source_language => Ada95;
    source_name => "Hello.Hello_Spg_1";

  end Hello_Spg_1;

  subprogram Hello_Spg_2
  properties
    source_language => Ada95;
    source_name => "Hello.Hello_Spg_2";

  end Hello_Spg_2;

  thread Task
  end Task;

  thread implementation Task.impl_1
  calls
    MyCalls :
    {P_Spg : subprogram Hello_Spg_1;}
;

  properties
    Dispatch_Protocol => periodic;
    Period => 1000 ms;
    Compute_Execution_time => 0 ms .. 3 ms;
    Deadline => 1000 ms;
    Source_Stack_Size => 13952 Bytes;

  end Task.impl_1;

  thread implementation Task.impl_2
  calls
    MyCall :
    {P_Spg : subprogram Hello_Spg_2;}
;

  properties
    Dispatch_Protocol => periodic;
    Period => 500 ms;
    Compute_Execution_time => 0 ms .. 3 ms;
    Deadline => 500 ms;
    Source_Stack_Size => 13952 Bytes;

  end Task.impl_2;

  processor cpurm
  end cpurm;

  processor implementation cpurm.impl
  properties
    Scheduling_Protocol => (Posix_1003_Highest_Priority_First_Protocol);

  end cpurm.impl;

  process node_a
  end node_a;

  process implementation node_a.impl
  subcomponents
    Task1 : thread Task.impl_1;
    Task2 : thread Task.impl_2;

    annex real_specification {**

--  test_env_subtheorem_call_no_parameter

theorem test_env_subtheorem_call_no_parameter
foreach e in processor_set do

var x := compute sub_theorem_1;

check ((x = 2.0));
end test_env_subtheorem_call_no_parameter;


--  test_env_subtheorem_call_one_parameter

theorem test_env_subtheorem_call_one_parameter
foreach e in processor_set do

var x := compute sub_theorem_2(e, 2);

check ((x = 2.0));
end test_env_subtheorem_call_one_parameter;


--  test_env_subtheorem_call_multiple_parameters

theorem test_env_subtheorem_call_multiple_parameters
foreach e in processor_set do

a_set := { p in process_set |
is_bound_to(p, e)};
var y := 
return (3);
var x := compute sub_theorem_3(a_set, y, 1);

check ((x = 4.0));
end test_env_subtheorem_call_multiple_parameters;


--  test_env_subtheorem_call_with_domain

theorem test_env_subtheorem_call_with_domain
foreach e in processor_set do

a_set := { p in process_set |
is_bound_to(p, e)};
var y := 
return (1);
var x := compute sub_theorem_4(a_set, y);

check ((x = 2.0));
end test_env_subtheorem_call_with_domain;


--  test_env_subtheorem_call_global_variable

theorem test_env_subtheorem_call_global_variable
foreach e in processor_set do

a_set := { p in process_set |
is_bound_to(p, e)};
global y := 
return (1);
var x := compute sub_theorem_5(a_set);

check ((x = 1.0));
end test_env_subtheorem_call_global_variable;


    **};
  end node_a.impl;

  system rma
  end rma;

  system implementation rma.ERC32
  subcomponents
    node_a : process node_a.impl;
    cpu_rm : processor cpurm.impl;

  properties
    Actual_Processor_Binding => (reference ( cpu_rm ))
      applies to node_a;

  end rma.ERC32;

end Test_01;

