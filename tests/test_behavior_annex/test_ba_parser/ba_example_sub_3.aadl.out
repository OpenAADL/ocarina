







property set Data_Model is
  Base_Type : list of classifier (
data)
    applies to (data);

  Code_Set : aadlinteger
    applies to (data);

  Data_Digits : aadlinteger
    applies to (data);

  Data_Scale : aadlinteger
    applies to (data);

  Data_Representation : enumeration (Array, Boolean, Bounded_Array, Character, Enum, Float, Fixed, Integer, String, Struct, Union)
    applies to (data);

  Dimension : list of aadlinteger
    applies to (data);

  Indefinite_Dimension : constant aadlinteger => -1;
  Infinite_Dimension : constant aadlinteger => -2;
  Element_Names : list of aadlstring
    applies to (data);

  Enumerators : list of aadlstring
    applies to (data);

  IEEE754_Precision : enumeration (Simple, Double)
    applies to (data);

  Initial_Value : list of aadlstring
    applies to (data, port, parameter);

  Integer_Range : range of aadlinteger
    applies to (data, port, parameter);

  Measurement_Unit : aadlstring
    applies to (data, port, parameter);

  Number_Representation : enumeration (Signed, Unsigned)
    applies to (data);

  Real_Range : range of aadlreal
    applies to (data, port, parameter);

  Representation : list of aadlstring
    applies to (data);

end Data_Model;

package Base_Types

public
  with data_model;

  data Boolean
  properties
    Data_Model::Data_Representation => Boolean;

  end Boolean;

  data Integer
  properties
    Data_Model::Data_Representation => Integer;

  end Integer;

  data Integer_8 extends Integer
  properties
    Data_Model::Number_Representation => Signed;
    Source_Data_Size => 1 Bytes;

  end Integer_8;

  data Integer_16 extends Integer
  properties
    Data_Model::Number_Representation => Signed;
    Source_Data_Size => 2 Bytes;

  end Integer_16;

  data Integer_32 extends Integer
  properties
    Data_Model::Number_Representation => Signed;
    Source_Data_Size => 4 Bytes;

  end Integer_32;

  data Integer_64 extends Integer
  properties
    Data_Model::Number_Representation => Signed;
    Source_Data_Size => 8 Bytes;

  end Integer_64;

  data Unsigned_8 extends Integer
  properties
    Data_Model::Number_Representation => Unsigned;
    Source_Data_Size => 1 Bytes;

  end Unsigned_8;

  data Unsigned_16 extends Integer
  properties
    Data_Model::Number_Representation => Unsigned;
    Source_Data_Size => 2 Bytes;

  end Unsigned_16;

  data Unsigned_32 extends Integer
  properties
    Data_Model::Number_Representation => Unsigned;
    Source_Data_Size => 4 Bytes;

  end Unsigned_32;

  data Unsigned_64 extends Integer
  properties
    Data_Model::Number_Representation => Unsigned;
    Source_Data_Size => 8 Bytes;

  end Unsigned_64;

  data Natural extends Integer
  properties
    Data_Model::Integer_Range => 0 .. Max_Target_Integer;

  end Natural;

  data Float
  properties
    Data_Model::Data_Representation => Float;

  end Float;

  data Float_32 extends Float
  properties
    Data_Model::IEEE754_Precision => Simple;
    Source_Data_Size => 4 Bytes;

  end Float_32;

  data Float_64 extends Float
  properties
    Data_Model::IEEE754_Precision => Double;
    Source_Data_Size => 8 Bytes;

  end Float_64;

  data Character
  properties
    Data_Model::Data_Representation => Character;

  end Character;

  data String
  properties
    Data_Model::Data_Representation => String;

  end String;

end Base_Types;

package BA_example3

public
  data number
  end number;

  subprogram mul
  features
    x : in parameter number;
    y : in parameter number;
    z : out parameter number;

  end mul;

  subprogram cube
  features
    x : in parameter number;
    y : out parameter number;
    mul : requires subprogram access mul;

  end cube;

  subprogram implementation cube.ba
    annex behavior_specification {**
    variables
      tmp : number;
    states
      s : initial state;
      s1 : final state;
    transitions      
      t : s -[]-> s1 {
         mul !(x, x, tmp);
         mul !(tmp, x, y)
        };
    **};
  end cube.ba;

  subprogram implementation cube.no_ba
  calls
    t :
    {mul1 : subprogram mul;
     mul2 : subprogram mul;}
;

  connections
    cnx1 : parameter x -> mul1.x;
    cnx2 : parameter x -> mul1.y;
    cnx3 : parameter mul1.z -> mul2.x;
    cnx4 : parameter x -> mul2.y;
    cnx5 : parameter mul2.z -> y;

  end cube.no_ba;

end BA_example3;

