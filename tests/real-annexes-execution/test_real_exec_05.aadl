package Test5_REAL
public

-----------------
-- Subprograms --
-----------------

subprogram Hello_Spg_1
properties
  source_language => Ada95;
  source_name     => "Hello.Hello_Spg_1";
end Hello_Spg_1;

subprogram Hello_Spg_2
properties
  source_language => Ada95;
  source_name     => "Hello.Hello_Spg_2";
end Hello_Spg_2;

-------------
-- Threads --
-------------

thread Task
end Task;

thread implementation Task.impl_1
calls
   MyCalls : {
      P_Spg : subprogram Hello_Spg_1;
   };
properties
   Dispatch_Protocol                  => periodic;
   Period                             => 1000ms;
   Compute_Execution_time             => 0 ms .. 3 ms;
   Deadline                           => 1000 ms;
   Source_Stack_Size                  => 13952 Bytes;
end Task.impl_1;

thread implementation Task.impl_2
calls
   MyCall : {
     P_Spg : subprogram Hello_Spg_2;
   };
properties
   Dispatch_Protocol                  => periodic;
   Period                             => 500ms;
   Compute_Execution_time             => 0 ms .. 3 ms;
   Deadline                           => 500 ms;
   Source_Stack_Size                  => 13952 Bytes;
end Task.impl_2;

---------------
-- Processor --
---------------

processor cpurm
end cpurm;

processor implementation cpurm.impl
properties 
   Scheduling_Protocol => (Posix_1003_Highest_Priority_First_Protocol);
end cpurm.impl;

---------------
-- Processes --
---------------

process node_a
end node_a;

process implementation node_a.impl
subcomponents
   Task1 : thread Task.impl_1;
   Task2 : thread Task.impl_2;

annex real_specification {**

--  test variable definition with literal

theorem variables_basis

foreach e in Processor_Set do
  
  var bla := 2;

  check (bla = 2);

end;

--  test variable definition with non-parenthezed expression

theorem variables_with_expression

foreach e in Processor_Set do
  
  var bla := 2 + 1;

  check (bla = 3);

end;

--  test variable definition with parenthezed expression
--  and dependant variables definitions

theorem variables_dependant

foreach e in Processor_Set do
  
  var x1 := 1;

  var x2 := (2 + x1);

  check (x2 = 3);

end;

--  test variable definition with parenthezed expression
--  with references to user-defined sets

theorem variables_set_dependants

foreach e in Processor_Set do
 
  a_set := {x in Process_Set | Is_Bound_To (x, e)};

  var x2 := (2 + Cardinal (a_set));

  check (x2 = 3);
end;


--  Tests the iterative expression with expressions and subprograms

theorem variables_iterative_expressions

foreach e in Processor_Set do

  Proc_Set(e) := {x in Process_Set | Is_Bound_To (x, e)};

  Threads := {x in Thread_Set | Is_Subcomponent_Of (x, Proc_Set)};

  var y := Max (Expr (Threads, t,
                   (2 * (Last
                      (Get_Property_Value  
                        (t, "Compute_Execution_Time"))))));
  check (y = 6.0);
end;

--  Tests the imbricated iterative expressions

theorem variables_imbricated_iterative_expressions

foreach e in Processor_Set do

  Proc_Set(e) := {x in Process_Set | Is_Bound_To (x, e)};

  Threads := {x in Thread_Set | Is_Subcomponent_Of (x, Proc_Set)};

  --  result should be 6 or 8

  var y := Max (Expr (Threads, t,
                   ((2 * Max (Expr (Threads, p,
                        (Get_Property_Value  
                          (p, "Period")))) / 500)
                      + Last 
                         (Get_Property_Value  
                           (t, "Compute_Execution_Time")))));

  check (y = 4000000003.0);
end;

--  Tests product, variable, iterative expressions and alias

theorem variables_product_expression

  foreach e in Process_Set do

     New_Set(e) := {x in Thread_Set | Is_Subcomponent_Of (x, e)};

     var x := Product (Expr (New_Set, t, (property (t, "period") / 1000.0)));

   check (x = 500000000000000000.0);
end;

--  Tests element lists, list casting operator and is_in operator

theorem element_list_expression

foreach e in Process_Set do

   New_Set(e) := {x in Thread_Set | Is_Subcomponent_Of (x, e)};

   check (Is_In (List (New_Set), List (Thread_Set)));
end;

--  Tests list static declaration

theorem element_list_static_declaration

foreach e in Process_Set do

   New_Set(e) := {x in Thread_Set | Is_Subcomponent_Of (x, e)};

   var period := list (500000000000, 1000000000000, 2000000000000);

   check (Is_In (Property (new_set, "period"), period));
end;

--  Tests list concatenation

theorem list_concat

foreach e in Process_Set do

   var lst1 := list ("test1", "test2");
   var lst2 := list ("test3");
   var lst3 := lst1 + lst2;

   check (Is_In (lst1, lst3) and Is_In (lst2, lst3));
end;

--  Test is_in with list and set

theorem is_in_list_and_set_expression

foreach e in Process_Set do

   New_Set(e) := {x in Thread_Set | Is_Subcomponent_Of (x, e)};

   check (Is_In (List (New_Set), Thread_Set) and not
          Is_In (Thread_Set, List (New_Set)));
end;


--  Tests if-then-else keyword

theorem if_then_else_expression

foreach e in Process_Set do

   var v1 := 1;
   var v2 := 2;
   var V3 := if (v1 = v2) then (0 + v1) + v2 else 0;

   check (v3 = 0);
end;

--  Tests head and queue functions

theorem test_head_and_queue

  foreach s in system_set do

    threads := {t in thread_set | (1 = 1)};

    var period_list := get_property_value (threads, "period");

    var poped_list := queue (period_list);

  check (size (period_list) = size (poped_list) + 1);
end test_head_and_queue;

--  Tests references properties extraction

theorem test_reference_property

  foreach cpu in processor_set do

    set := {p in process_set | 
        (head (get_property_value 
                  (p, "actual_processor_binding")) = cpu)};

  check (Cardinal (set) = 1);
end test_reference_property;

**};

end node_a.impl;

------------
-- System --
------------

system rma 
end rma;

system implementation rma.ERC32
subcomponents
   node_a : process node_a.impl;
   cpu_rm : processor cpurm.impl;
properties
   Actual_Processor_Binding => (reference (cpu_rm)) applies to node_a;
end rma.ERC32;

end Test5_REAL; 
