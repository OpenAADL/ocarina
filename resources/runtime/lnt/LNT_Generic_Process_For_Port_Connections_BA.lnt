module LNT_Generic_Process_For_Port_Connections_BA (BA_Types) is -- With Behavior Annex
--  data port --
   process Data_Port [
   Input: LNT_Channel_Data_Port, 
   Output: LNT_Channel_Data_Port] 
   is 
      var Data : LNT_Type_Data in
         Data := DATA_INIT;
         loop 
            select 
               Input (?Data)
               [] 
               Output (Data)
            end select 
         end loop
      end var
   end process

--  event port --
--  for no periodic threads --
   process Event_Port [
   Input: LNT_Channel_Event_Port, 
   Output: LNT_Channel_Event_Port,
   Notify: LNT_Channel_Event](
   Queue_Size: Nat) 
   is 
      var 
         Nb_Events : Nat,
         Is_New : bool         
      in 
         Nb_Events := 0; 
         Is_New := false; 
         loop 
            select 
               Input (true); 
               Is_New := true;               
               if (Nb_Events < Queue_Size) then
                  Nb_Events := Nb_Events + 1
               end if
               []
               if (Nb_Events > 0) then 
                  Output (true);
                  Nb_Events := Nb_Events - 1
               else
                  Output (false)
               end if   
               []
               if (Is_New) then 
                  Notify (Incoming_Event); 
                  Is_New := false
               else 
                  Notify (No_Event)
               end if
            end select 
         end loop
      end var
   end process
   
-- for periodic threads --
   process Event_Port_For_Periodic [
   Input: LNT_Channel_Event_Port, 
   Output: LNT_Channel_Event_Port](
   Queue_Size: Nat) 
   is 
      var 
         Nb_Events : Nat
      in 
         Nb_Events := 0; 
         loop 
            select 
               Input (true); 
               if (Nb_Events < Queue_Size) then
                  Nb_Events := Nb_Events + 1
               end if
               []
               if (Nb_Events > 0) then 
                  Output (true);
                  Nb_Events := Nb_Events - 1
               else
                  Output (false)
               end if   
            end select 
         end loop
      end var
   end process

-- event data port
-- for no periodic threads --
   process Event_Data_Port_Sporadic [
   Input: LNT_Channel_Event_Data_Port, 
   Output: LNT_Channel_Event_Data_Port,
   Notify: LNT_Channel_Event](
   Queue_Size: Nat) 
   is 
      var 
         FIFO : LNT_Type_Data_FIFO,
         Is_New : bool,
         D : LNT_Type_Data
      in 
      
         FIFO := {};
         D := DATA_INIT; 
         Is_New := false;
         loop 
            select 
               Input (?D, true); 
               Is_New := true;
               if length (FIFO) >= Queue_Size then
                  FIFO := tail (FIFO)
               end if;
               FIFO := append (D, FIFO)
               []
               if (Is_New) then 
                  Notify (Incoming_Event); 
                  Is_New := false
               else 
                  Notify (No_Event)
               end if
               []
               if (FIFO != {}) then 
                  Output (Head (FIFO), true);
                  FIFO := tail (FIFO)
               else
                  Output (D,false)
               end if
            end select 
         end loop
      end var
   end process

-- for periodic threads --
   process Event_Data_Port_For_Periodic [
   Input: LNT_Channel_Event_Data_Port, 
   Output: LNT_Channel_Event_Data_Port](
   Queue_Size: Nat) 
   is 
      var 
         FIFO : LNT_Type_Data_FIFO,
         D : LNT_Type_Data
      in 
         FIFO := {};
         D := DATA_INIT; 
         loop 
            select 
               Input (?D, true); 
               if length (FIFO) >= Queue_Size then
                  FIFO := tail (FIFO)
               end if;
               FIFO := append (D, FIFO)
               []
               if (FIFO != {}) then 
                  Output (Head (FIFO), true);
                  FIFO := tail (FIFO)
               else
                  Output (D,false)
               end if
            end select 
         end loop
      end var
   end process
end module
